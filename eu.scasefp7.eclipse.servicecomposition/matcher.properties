## METADATA WEIGHTS: these weights are used by the OwlMetadata function to calculate the weight of the metadata
metadata.DESCRIPTION_WEIGHT = 1
metadata.COST_WEIGHT = -1


## NAME_SIMILARITY_THRESHOLD : if similarity between two service names is below this variable, those services cannot be considered the same
## (no matter how close their matching otherwise). This value is not take into account when trying to replace a service with one of its implementations.
matcher.NAME_SIMILARITY_THRESHOLD = 1
## NAME_SIMILARITY_WEIGHT : weight according to action and operation name similarity
matcher.NAME_SIMILARITY_WEIGHT = 4
## OUTPUT_TO_INPUT_WEIGHT : weight for outputs that can be used as inputs from nearby operations
matcher.OUTPUT_TO_INPUT_WEIGHT = 1
## INPUT_TO_INPUT_WEIGHT : weight for common inputs with nearby operations (should most likely 0)
matcher.INPUT_TO_INPUT_WEIGHT = 0
## POSSIBLE_INPUT_WEIGHT : weight for possible inputs (positive values tend to maximize number of possible inputs while minimizing redundant inputs)
matcher.POSSIBLE_INPUT_WEIGHT = 1
## MANDATORY_INPUT_WEIGHT : weight for mandatory inputs (positive values cause a slight bias towards not wanting redundant inputs)
matcher.MANDATORY_INPUT_WEIGHT = 1
## BIAS : biases matcher towards being stricter for negative values
matcher.BIAS = 0
## VARIABLE_SIMILARITY_THRESHOLD : threshold for distance in order for two variable names to be considered the same
matcher.VARIABLE_SIMILARITY_THRESHOLD = 0.5


## IGNORE_ASSIGNED_POSSIBLE_OUTPUTS: if set to false, it will not add weight to services by outputs that already take values from somewhere
## (it is always considered false for placement on edges either way) 
transformer.IGNORE_ASSIGNED_POSSIBLE_OUTPUTS = false
## REPLACE_NAME_SIMILARITY_THRESHOLD: replaces matcher.NAME_SIMILARITY_THRESHOLD when comparing real operations of the same ideal operation between themselves.
transformer.REPLACE_NAME_SIMILARITY_THRESHOLD = 0



## VARIABLE_NAME_SIMILARITY_THRESHOLD: a threshold for a variable and a text description of it to be considered the same
interpreter.VARIABLE_NAME_SIMILARITY_THRESHOLD = 0.5
## MAX_DISTANCE_BETWEEN_SOLUTIONS: the maximum difference between two choices to not be able to recognize between them (in such cases, the user is asked in such cases)
## this value can be zero to ensure that the user only has to make a choice only in the case of total incomprehension of conditions.
## this value should be extremely small, as it is divided by the multiplication of compared string lengths
interpreter.MAX_DISTANCE_BETWEEN_SOLUTIONS = 0.001
## VALUE_SIMILARITY_THRESHOLD: a lower limit for how similar an branch option text should be with the checked variable's value
## if this value is too strict and does not allow for any options for a condition, the condition is re-checked with this value being considered zero
interpreter.VALUE_SIMILARITY_THRESHOLD = 0.4
## TRUE_PREDICATES: predicates equivalent to 'true'
interpreter.TRUE_PREDICATES = true, yes
## FALSE_PREDICATES: predicates equivalent to 'false'
interpreter.FALSE_PREDICATES = false, no
## ELSE_RPEDICATES: predicates equivalent to else branches (also include empty string)
interpreter.ELSE_PREDICATES = else, , otherwise


## LEVENSHTEIN_THRESHOLD : snaps the quantity Levenshtein similarity to zero if less than this value
## value of one becomes direct string matching
similarity.LEVENSHTEIN_THRESHOLD = 0.8
similarity.ENDINGS = e, ed, ing, ment
similarity.IGNORE_PREDICATES = get, set, result, target